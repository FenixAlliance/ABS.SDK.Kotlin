/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.EmptyEnvelope
import org.openapitools.client.models.ErrorEnvelope
import org.openapitools.client.models.ExtendedOrderDtoListEnvelope
import org.openapitools.client.models.Int32Envelope
import org.openapitools.client.models.OrderCreateDto
import org.openapitools.client.models.OrderDtoEnvelope
import org.openapitools.client.models.OrderDtoListEnvelope
import org.openapitools.client.models.OrderLineCreateDto
import org.openapitools.client.models.OrderLineDtoEnvelope
import org.openapitools.client.models.OrderLineDtoListEnvelope
import org.openapitools.client.models.OrderLineUpdateDto
import org.openapitools.client.models.OrderUpdateDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrdersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersCountGet(tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2OrdersServiceOrdersCountGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersCountGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersCountGetRequestConfig(tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersCountGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersCountGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/Count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ExtendedOrderDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersExtendedGet(tenantId: java.util.UUID) : ExtendedOrderDtoListEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersExtendedGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExtendedOrderDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<ExtendedOrderDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersExtendedGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<ExtendedOrderDtoListEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersExtendedGetRequestConfig(tenantId = tenantId)

        return request<Unit, ExtendedOrderDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersExtendedGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersExtendedGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/Extended",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdCalculatePut(orderId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdCalculatePutWithHttpInfo(orderId = orderId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdCalculatePutWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdCalculatePutRequestConfig(orderId = orderId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdCalculatePut
     *
     * @param orderId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdCalculatePutRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/OrdersService/Orders/{orderId}/Calculate".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdDelete(orderId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdDeleteWithHttpInfo(orderId = orderId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdDeleteWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdDeleteRequestConfig(orderId = orderId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdDelete
     *
     * @param orderId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdDeleteRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/OrdersService/Orders/{orderId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesCountGet(orderId: java.util.UUID, tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesCountGetWithHttpInfo(orderId = orderId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesCountGetWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesCountGetRequestConfig(orderId = orderId, tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesCountGet
     *
     * @param orderId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesCountGetRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines/Count".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return OrderLineDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesGet(orderId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID? = null) : OrderLineDtoListEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesGetWithHttpInfo(orderId = orderId, tenantId = tenantId, itemId = itemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderLineDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return ApiResponse<OrderLineDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesGetWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : ApiResponse<OrderLineDtoListEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesGetRequestConfig(orderId = orderId, tenantId = tenantId, itemId = itemId)

        return request<Unit, OrderLineDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesGet
     *
     * @param orderId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesGetRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
                if (itemId != null) {
                    put("itemId", listOf(itemId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePut(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePutWithHttpInfo(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePutWithHttpInfo(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePutRequestConfig(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePut
     *
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePutRequestConfig(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines/{orderLineId}/Calculate".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())).replace("{"+"orderLineId"+"}", encodeURIComponent(orderLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDelete(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDeleteWithHttpInfo(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDeleteWithHttpInfo(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDeleteRequestConfig(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDelete
     *
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDeleteRequestConfig(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines/{orderLineId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())).replace("{"+"orderLineId"+"}", encodeURIComponent(orderLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return OrderLineDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGet(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : OrderLineDtoEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGetWithHttpInfo(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderLineDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return ApiResponse<OrderLineDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGetWithHttpInfo(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<OrderLineDtoEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGetRequestConfig(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId)

        return request<Unit, OrderLineDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGet
     *
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGetRequestConfig(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines/{orderLineId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())).replace("{"+"orderLineId"+"}", encodeURIComponent(orderLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @param orderLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPut(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID, orderLineUpdateDto: OrderLineUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPutWithHttpInfo(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId, orderLineUpdateDto = orderLineUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @param orderLineUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPutWithHttpInfo(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID, orderLineUpdateDto: OrderLineUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPutRequestConfig(orderId = orderId, orderLineId = orderLineId, tenantId = tenantId, orderLineUpdateDto = orderLineUpdateDto)

        return request<OrderLineUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPut
     *
     * @param orderId 
     * @param orderLineId 
     * @param tenantId 
     * @param orderLineUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPutRequestConfig(orderId: java.util.UUID, orderLineId: java.util.UUID, tenantId: java.util.UUID, orderLineUpdateDto: OrderLineUpdateDto?) : RequestConfig<OrderLineUpdateDto> {
        val localVariableBody = orderLineUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines/{orderLineId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())).replace("{"+"orderLineId"+"}", encodeURIComponent(orderLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param orderLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesPost(orderId: java.util.UUID, tenantId: java.util.UUID, orderLineCreateDto: OrderLineCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdLinesPostWithHttpInfo(orderId = orderId, tenantId = tenantId, orderLineCreateDto = orderLineCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param orderLineCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdLinesPostWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID, orderLineCreateDto: OrderLineCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdLinesPostRequestConfig(orderId = orderId, tenantId = tenantId, orderLineCreateDto = orderLineCreateDto)

        return request<OrderLineCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdLinesPost
     *
     * @param orderId 
     * @param tenantId 
     * @param orderLineCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdLinesPostRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID, orderLineCreateDto: OrderLineCreateDto?) : RequestConfig<OrderLineCreateDto> {
        val localVariableBody = orderLineCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/OrdersService/Orders/{orderId}/Lines".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param orderUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersOrderIdPut(orderId: java.util.UUID, tenantId: java.util.UUID, orderUpdateDto: OrderUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersOrderIdPutWithHttpInfo(orderId = orderId, tenantId = tenantId, orderUpdateDto = orderUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @param orderUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersOrderIdPutWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID, orderUpdateDto: OrderUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersOrderIdPutRequestConfig(orderId = orderId, tenantId = tenantId, orderUpdateDto = orderUpdateDto)

        return request<OrderUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersOrderIdPut
     *
     * @param orderId 
     * @param tenantId 
     * @param orderUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersOrderIdPutRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID, orderUpdateDto: OrderUpdateDto?) : RequestConfig<OrderUpdateDto> {
        val localVariableBody = orderUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/OrdersService/Orders/{orderId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param orderCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersPost(tenantId: java.util.UUID, orderCreateDto: OrderCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersPostWithHttpInfo(tenantId = tenantId, orderCreateDto = orderCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param orderCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersPostWithHttpInfo(tenantId: java.util.UUID, orderCreateDto: OrderCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersPostRequestConfig(tenantId = tenantId, orderCreateDto = orderCreateDto)

        return request<OrderCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersPost
     *
     * @param tenantId 
     * @param orderCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersPostRequestConfig(tenantId: java.util.UUID, orderCreateDto: OrderCreateDto?) : RequestConfig<OrderCreateDto> {
        val localVariableBody = orderCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/OrdersService/Orders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param cartId 
     * @return OrderDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2OrdersServiceOrdersSubmitCartPost(cartId: java.util.UUID) : OrderDtoEnvelope {
        val localVarResponse = apiV2OrdersServiceOrdersSubmitCartPostWithHttpInfo(cartId = cartId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param cartId 
     * @return ApiResponse<OrderDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2OrdersServiceOrdersSubmitCartPostWithHttpInfo(cartId: java.util.UUID) : ApiResponse<OrderDtoEnvelope?> {
        val localVariableConfig = apiV2OrdersServiceOrdersSubmitCartPostRequestConfig(cartId = cartId)

        return request<Unit, OrderDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2OrdersServiceOrdersSubmitCartPost
     *
     * @param cartId 
     * @return RequestConfig
     */
    fun apiV2OrdersServiceOrdersSubmitCartPostRequestConfig(cartId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("cartId", listOf(cartId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/OrdersService/Orders/SubmitCart",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return OrderDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrderAsync(orderId: java.util.UUID, tenantId: java.util.UUID) : OrderDtoEnvelope {
        val localVarResponse = getOrderAsyncWithHttpInfo(orderId = orderId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderId 
     * @param tenantId 
     * @return ApiResponse<OrderDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrderAsyncWithHttpInfo(orderId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<OrderDtoEnvelope?> {
        val localVariableConfig = getOrderAsyncRequestConfig(orderId = orderId, tenantId = tenantId)

        return request<Unit, OrderDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrderAsync
     *
     * @param orderId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun getOrderAsyncRequestConfig(orderId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders/{orderId}".replace("{"+"orderId"+"}", encodeURIComponent(orderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return OrderDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getOrdersAsync(tenantId: java.util.UUID) : OrderDtoListEnvelope {
        val localVarResponse = getOrdersAsyncWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<OrderDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getOrdersAsyncWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<OrderDtoListEnvelope?> {
        val localVariableConfig = getOrdersAsyncRequestConfig(tenantId = tenantId)

        return request<Unit, OrderDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getOrdersAsync
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun getOrdersAsyncRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/OrdersService/Orders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
