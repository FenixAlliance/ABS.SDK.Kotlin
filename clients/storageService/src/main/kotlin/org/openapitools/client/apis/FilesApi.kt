/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.EmptyEnvelope
import org.openapitools.client.models.ErrorEnvelope
import org.openapitools.client.models.FileUploadDtoEnvelope

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class FilesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param id  (optional)
     * @param timestamp  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createFileAsync(tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null, id: java.util.UUID? = null, timestamp: java.time.OffsetDateTime? = null, notes: kotlin.String? = null, title: kotlin.String? = null, author: kotlin.String? = null, isFolder: kotlin.Boolean? = null, fileName: kotlin.String? = null, `abstract`: kotlin.String? = null, keyWords: kotlin.String? = null, validResponse: kotlin.Boolean? = null, parentFileUploadId: kotlin.String? = null, filePath: kotlin.String? = null, file: java.io.File? = null) : EmptyEnvelope {
        val localVarResponse = createFileAsyncWithHttpInfo(tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion, id = id, timestamp = timestamp, notes = notes, title = title, author = author, isFolder = isFolder, fileName = fileName, `abstract` = `abstract`, keyWords = keyWords, validResponse = validResponse, parentFileUploadId = parentFileUploadId, filePath = filePath, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param id  (optional)
     * @param timestamp  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createFileAsyncWithHttpInfo(tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?, id: java.util.UUID?, timestamp: java.time.OffsetDateTime?, notes: kotlin.String?, title: kotlin.String?, author: kotlin.String?, isFolder: kotlin.Boolean?, fileName: kotlin.String?, `abstract`: kotlin.String?, keyWords: kotlin.String?, validResponse: kotlin.Boolean?, parentFileUploadId: kotlin.String?, filePath: kotlin.String?, file: java.io.File?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = createFileAsyncRequestConfig(tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion, id = id, timestamp = timestamp, notes = notes, title = title, author = author, isFolder = isFolder, fileName = fileName, `abstract` = `abstract`, keyWords = keyWords, validResponse = validResponse, parentFileUploadId = parentFileUploadId, filePath = filePath, file = file)

        return request<Map<String, PartConfig<*>>, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createFileAsync
     *
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param id  (optional)
     * @param timestamp  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return RequestConfig
     */
    fun createFileAsyncRequestConfig(tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?, id: java.util.UUID?, timestamp: java.time.OffsetDateTime?, notes: kotlin.String?, title: kotlin.String?, author: kotlin.String?, isFolder: kotlin.Boolean?, fileName: kotlin.String?, `abstract`: kotlin.String?, keyWords: kotlin.String?, validResponse: kotlin.Boolean?, parentFileUploadId: kotlin.String?, filePath: kotlin.String?, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "id" to PartConfig(body = id, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),
            "notes" to PartConfig(body = notes, headers = mutableMapOf()),
            "title" to PartConfig(body = title, headers = mutableMapOf()),
            "author" to PartConfig(body = author, headers = mutableMapOf()),
            "isFolder" to PartConfig(body = isFolder, headers = mutableMapOf()),
            "fileName" to PartConfig(body = fileName, headers = mutableMapOf()),
            "abstract" to PartConfig(body = `abstract`, headers = mutableMapOf()),
            "keyWords" to PartConfig(body = keyWords, headers = mutableMapOf()),
            "validResponse" to PartConfig(body = validResponse, headers = mutableMapOf()),
            "parentFileUploadId" to PartConfig(body = parentFileUploadId, headers = mutableMapOf()),
            "filePath" to PartConfig(body = filePath, headers = mutableMapOf()),
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/StorageService/Files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return FileUploadDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteFileAsync(fileId: java.util.UUID, tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null) : FileUploadDtoEnvelope {
        val localVarResponse = deleteFileAsyncWithHttpInfo(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileUploadDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse<FileUploadDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFileAsyncWithHttpInfo(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : ApiResponse<FileUploadDtoEnvelope?> {
        val localVariableConfig = deleteFileAsyncRequestConfig(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return request<Unit, FileUploadDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFileAsync
     *
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return RequestConfig
     */
    fun deleteFileAsyncRequestConfig(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/StorageService/Files/{fileId}".replace("{"+"fileId"+"}", encodeURIComponent(fileId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downloadFileAsync(fileId: java.util.UUID, tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null) : java.io.File {
        val localVarResponse = downloadFileAsyncWithHttpInfo(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downloadFileAsyncWithHttpInfo(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : ApiResponse<java.io.File?> {
        val localVariableConfig = downloadFileAsyncRequestConfig(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation downloadFileAsync
     *
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return RequestConfig
     */
    fun downloadFileAsyncRequestConfig(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/StorageService/Files/{fileId}/Raw".replace("{"+"fileId"+"}", encodeURIComponent(fileId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return FileUploadDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFileAsync(fileId: java.util.UUID, tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null) : FileUploadDtoEnvelope {
        val localVarResponse = getFileAsyncWithHttpInfo(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileUploadDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse<FileUploadDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFileAsyncWithHttpInfo(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : ApiResponse<FileUploadDtoEnvelope?> {
        val localVariableConfig = getFileAsyncRequestConfig(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return request<Unit, FileUploadDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFileAsync
     *
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return RequestConfig
     */
    fun getFileAsyncRequestConfig(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/StorageService/Files/{fileId}".replace("{"+"fileId"+"}", encodeURIComponent(fileId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return FileUploadDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFilesAsync(tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null) : FileUploadDtoEnvelope {
        val localVarResponse = getFilesAsyncWithHttpInfo(tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileUploadDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse<FileUploadDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFilesAsyncWithHttpInfo(tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : ApiResponse<FileUploadDtoEnvelope?> {
        val localVariableConfig = getFilesAsyncRequestConfig(tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion)

        return request<Unit, FileUploadDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFilesAsync
     *
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return RequestConfig
     */
    fun getFilesAsyncRequestConfig(tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/StorageService/Files",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param metadata  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadID  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return FileUploadDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateFileAsync(fileId: java.util.UUID, tenantId: java.util.UUID? = null, apiVersion: kotlin.String? = null, xApiVersion: kotlin.String? = null, notes: kotlin.String? = null, metadata: kotlin.String? = null, title: kotlin.String? = null, author: kotlin.String? = null, isFolder: kotlin.Boolean? = null, fileName: kotlin.String? = null, `abstract`: kotlin.String? = null, keyWords: kotlin.String? = null, validResponse: kotlin.Boolean? = null, parentFileUploadID: kotlin.String? = null, filePath: kotlin.String? = null, file: java.io.File? = null) : FileUploadDtoEnvelope {
        val localVarResponse = updateFileAsyncWithHttpInfo(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion, notes = notes, metadata = metadata, title = title, author = author, isFolder = isFolder, fileName = fileName, `abstract` = `abstract`, keyWords = keyWords, validResponse = validResponse, parentFileUploadID = parentFileUploadID, filePath = filePath, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileUploadDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param metadata  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadID  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return ApiResponse<FileUploadDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateFileAsyncWithHttpInfo(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?, notes: kotlin.String?, metadata: kotlin.String?, title: kotlin.String?, author: kotlin.String?, isFolder: kotlin.Boolean?, fileName: kotlin.String?, `abstract`: kotlin.String?, keyWords: kotlin.String?, validResponse: kotlin.Boolean?, parentFileUploadID: kotlin.String?, filePath: kotlin.String?, file: java.io.File?) : ApiResponse<FileUploadDtoEnvelope?> {
        val localVariableConfig = updateFileAsyncRequestConfig(fileId = fileId, tenantId = tenantId, apiVersion = apiVersion, xApiVersion = xApiVersion, notes = notes, metadata = metadata, title = title, author = author, isFolder = isFolder, fileName = fileName, `abstract` = `abstract`, keyWords = keyWords, validResponse = validResponse, parentFileUploadID = parentFileUploadID, filePath = filePath, file = file)

        return request<Map<String, PartConfig<*>>, FileUploadDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateFileAsync
     *
     * @param fileId 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param metadata  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param `abstract`  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadID  (optional)
     * @param filePath  (optional)
     * @param file  (optional)
     * @return RequestConfig
     */
    fun updateFileAsyncRequestConfig(fileId: java.util.UUID, tenantId: java.util.UUID?, apiVersion: kotlin.String?, xApiVersion: kotlin.String?, notes: kotlin.String?, metadata: kotlin.String?, title: kotlin.String?, author: kotlin.String?, isFolder: kotlin.Boolean?, fileName: kotlin.String?, `abstract`: kotlin.String?, keyWords: kotlin.String?, validResponse: kotlin.Boolean?, parentFileUploadID: kotlin.String?, filePath: kotlin.String?, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "notes" to PartConfig(body = notes, headers = mutableMapOf()),
            "metadata" to PartConfig(body = metadata, headers = mutableMapOf()),
            "title" to PartConfig(body = title, headers = mutableMapOf()),
            "author" to PartConfig(body = author, headers = mutableMapOf()),
            "isFolder" to PartConfig(body = isFolder, headers = mutableMapOf()),
            "fileName" to PartConfig(body = fileName, headers = mutableMapOf()),
            "abstract" to PartConfig(body = `abstract`, headers = mutableMapOf()),
            "keyWords" to PartConfig(body = keyWords, headers = mutableMapOf()),
            "validResponse" to PartConfig(body = validResponse, headers = mutableMapOf()),
            "parentFileUploadID" to PartConfig(body = parentFileUploadID, headers = mutableMapOf()),
            "filePath" to PartConfig(body = filePath, headers = mutableMapOf()),
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenantId", listOf(tenantId.toString()))
                }
                if (apiVersion != null) {
                    put("api-version", listOf(apiVersion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        xApiVersion?.apply { localVariableHeaders["x-api-version"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/StorageService/Files/{fileId}".replace("{"+"fileId"+"}", encodeURIComponent(fileId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
