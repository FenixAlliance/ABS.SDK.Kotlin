/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DealUnitCreateDto
import org.openapitools.client.models.DealUnitDtoEnvelope
import org.openapitools.client.models.DealUnitDtoListEnvelope
import org.openapitools.client.models.DealUnitLineCreateDto
import org.openapitools.client.models.DealUnitLineDtoEnvelope
import org.openapitools.client.models.DealUnitLineDtoListEnvelope
import org.openapitools.client.models.DealUnitLineUpdateDto
import org.openapitools.client.models.DealUnitUpdateDto
import org.openapitools.client.models.EmptyEnvelope
import org.openapitools.client.models.ErrorEnvelope
import org.openapitools.client.models.ExtendedDealUnitDtoEnvelope
import org.openapitools.client.models.ExtendedDealUnitDtoListEnvelope
import org.openapitools.client.models.Int32Envelope

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DealUnitsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsCountGet(tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2DealsServiceDealUnitsCountGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsCountGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsCountGetRequestConfig(tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsCountGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsCountGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/Count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdCalculatePut(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdCalculatePut
     *
     * @param dealUnitId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Calculate".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdDelete(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdDeleteRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdDelete
     *
     * @param dealUnitId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdDeleteRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ExtendedDealUnitDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdExtendedGet(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ExtendedDealUnitDtoEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExtendedDealUnitDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ApiResponse<ExtendedDealUnitDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<ExtendedDealUnitDtoEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId)

        return request<Unit, ExtendedDealUnitDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdExtendedGet
     *
     * @param dealUnitId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Extended".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet
     *
     * @param dealUnitId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequestConfig(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut
     *
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequestConfig(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())).replace("{"+"dealUnitLineId"+"}", encodeURIComponent(dealUnitLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequestConfig(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete
     *
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequestConfig(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())).replace("{"+"dealUnitLineId"+"}", encodeURIComponent(dealUnitLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return DealUnitLineDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : DealUnitLineDtoEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DealUnitLineDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return ApiResponse<DealUnitLineDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<DealUnitLineDtoEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequestConfig(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId)

        return request<Unit, DealUnitLineDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet
     *
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequestConfig(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())).replace("{"+"dealUnitLineId"+"}", encodeURIComponent(dealUnitLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @param dealUnitLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineUpdateDto: DealUnitLineUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId, dealUnitLineUpdateDto = dealUnitLineUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @param dealUnitLineUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineUpdateDto: DealUnitLineUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequestConfig(dealUnitId = dealUnitId, dealUnitLineId = dealUnitLineId, tenantId = tenantId, dealUnitLineUpdateDto = dealUnitLineUpdateDto)

        return request<DealUnitLineUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut
     *
     * @param dealUnitId 
     * @param dealUnitLineId 
     * @param tenantId 
     * @param dealUnitLineUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequestConfig(dealUnitId: java.util.UUID, dealUnitLineId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineUpdateDto: DealUnitLineUpdateDto?) : RequestConfig<DealUnitLineUpdateDto> {
        val localVariableBody = dealUnitLineUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())).replace("{"+"dealUnitLineId"+"}", encodeURIComponent(dealUnitLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return DealUnitLineDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesGet(dealUnitId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID? = null) : DealUnitLineDtoListEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId, itemId = itemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DealUnitLineDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return ApiResponse<DealUnitLineDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : ApiResponse<DealUnitLineDtoListEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesGetRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId, itemId = itemId)

        return request<Unit, DealUnitLineDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesGet
     *
     * @param dealUnitId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesGetRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
                if (itemId != null) {
                    put("itemId", listOf(itemId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesPost(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineCreateDto: DealUnitLineCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId, dealUnitLineCreateDto = dealUnitLineCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitLineCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineCreateDto: DealUnitLineCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdLinesPostRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId, dealUnitLineCreateDto = dealUnitLineCreateDto)

        return request<DealUnitLineCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdLinesPost
     *
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitLineCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdLinesPostRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitLineCreateDto: DealUnitLineCreateDto?) : RequestConfig<DealUnitLineCreateDto> {
        val localVariableBody = dealUnitLineCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdPut(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitUpdateDto: DealUnitUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId, dealUnitUpdateDto = dealUnitUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitUpdateDto: DealUnitUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsDealUnitIdPutRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId, dealUnitUpdateDto = dealUnitUpdateDto)

        return request<DealUnitUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsDealUnitIdPut
     *
     * @param dealUnitId 
     * @param tenantId 
     * @param dealUnitUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsDealUnitIdPutRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID, dealUnitUpdateDto: DealUnitUpdateDto?) : RequestConfig<DealUnitUpdateDto> {
        val localVariableBody = dealUnitUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ExtendedDealUnitDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsExtendedGet(tenantId: java.util.UUID) : ExtendedDealUnitDtoListEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExtendedDealUnitDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<ExtendedDealUnitDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<ExtendedDealUnitDtoListEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsExtendedGetRequestConfig(tenantId = tenantId)

        return request<Unit, ExtendedDealUnitDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsExtendedGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsExtendedGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/Extended",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return DealUnitDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsGet(tenantId: java.util.UUID) : DealUnitDtoListEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DealUnitDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<DealUnitDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<DealUnitDtoListEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsGetRequestConfig(tenantId = tenantId)

        return request<Unit, DealUnitDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param dealUnitCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2DealsServiceDealUnitsPost(tenantId: java.util.UUID, dealUnitCreateDto: DealUnitCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2DealsServiceDealUnitsPostWithHttpInfo(tenantId = tenantId, dealUnitCreateDto = dealUnitCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param dealUnitCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2DealsServiceDealUnitsPostWithHttpInfo(tenantId: java.util.UUID, dealUnitCreateDto: DealUnitCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2DealsServiceDealUnitsPostRequestConfig(tenantId = tenantId, dealUnitCreateDto = dealUnitCreateDto)

        return request<DealUnitCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2DealsServiceDealUnitsPost
     *
     * @param tenantId 
     * @param dealUnitCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2DealsServiceDealUnitsPostRequestConfig(tenantId: java.util.UUID, dealUnitCreateDto: DealUnitCreateDto?) : RequestConfig<DealUnitCreateDto> {
        val localVariableBody = dealUnitCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/DealsService/DealUnits",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return DealUnitDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDealUnitAsync(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : DealUnitDtoEnvelope {
        val localVarResponse = getDealUnitAsyncWithHttpInfo(dealUnitId = dealUnitId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DealUnitDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param dealUnitId 
     * @param tenantId 
     * @return ApiResponse<DealUnitDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDealUnitAsyncWithHttpInfo(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<DealUnitDtoEnvelope?> {
        val localVariableConfig = getDealUnitAsyncRequestConfig(dealUnitId = dealUnitId, tenantId = tenantId)

        return request<Unit, DealUnitDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDealUnitAsync
     *
     * @param dealUnitId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun getDealUnitAsyncRequestConfig(dealUnitId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/DealsService/DealUnits/{dealUnitId}".replace("{"+"dealUnitId"+"}", encodeURIComponent(dealUnitId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
