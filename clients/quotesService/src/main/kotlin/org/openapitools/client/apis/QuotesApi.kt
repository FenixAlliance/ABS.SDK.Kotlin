/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.EmptyEnvelope
import org.openapitools.client.models.ErrorEnvelope
import org.openapitools.client.models.ExtendedQuoteDtoListEnvelope
import org.openapitools.client.models.Int32Envelope
import org.openapitools.client.models.QuoteCreateDto
import org.openapitools.client.models.QuoteDtoEnvelope
import org.openapitools.client.models.QuoteDtoListEnvelope
import org.openapitools.client.models.QuoteLineCreateDto
import org.openapitools.client.models.QuoteLineDtoEnvelope
import org.openapitools.client.models.QuoteLineDtoListEnvelope
import org.openapitools.client.models.QuoteLineUpdateDto
import org.openapitools.client.models.QuoteUpdateDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class QuotesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesCountGet(tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2QuotesServiceQuotesCountGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesCountGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesCountGetRequestConfig(tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesCountGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesCountGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/Count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ExtendedQuoteDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesExtendedGet(tenantId: java.util.UUID) : ExtendedQuoteDtoListEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesExtendedGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExtendedQuoteDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<ExtendedQuoteDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesExtendedGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<ExtendedQuoteDtoListEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesExtendedGetRequestConfig(tenantId = tenantId)

        return request<Unit, ExtendedQuoteDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesExtendedGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesExtendedGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/Extended",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return QuoteDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesGet(tenantId: java.util.UUID) : QuoteDtoListEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesGetWithHttpInfo(tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @return ApiResponse<QuoteDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesGetWithHttpInfo(tenantId: java.util.UUID) : ApiResponse<QuoteDtoListEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesGetRequestConfig(tenantId = tenantId)

        return request<Unit, QuoteDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesGet
     *
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesGetRequestConfig(tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param quoteCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesPost(tenantId: java.util.UUID, quoteCreateDto: QuoteCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesPostWithHttpInfo(tenantId = tenantId, quoteCreateDto = quoteCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param tenantId 
     * @param quoteCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesPostWithHttpInfo(tenantId: java.util.UUID, quoteCreateDto: QuoteCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesPostRequestConfig(tenantId = tenantId, quoteCreateDto = quoteCreateDto)

        return request<QuoteCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesPost
     *
     * @param tenantId 
     * @param quoteCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesPostRequestConfig(tenantId: java.util.UUID, quoteCreateDto: QuoteCreateDto?) : RequestConfig<QuoteCreateDto> {
        val localVariableBody = quoteCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/QuotesService/Quotes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdCalculatePut(quoteId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo(quoteId = quoteId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdCalculatePutRequestConfig(quoteId = quoteId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdCalculatePut
     *
     * @param quoteId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdCalculatePutRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Calculate".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdDelete(quoteId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo(quoteId = quoteId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdDeleteRequestConfig(quoteId = quoteId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdDelete
     *
     * @param quoteId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdDeleteRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/QuotesService/Quotes/{quoteId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return Int32Envelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesCountGet(quoteId: java.util.UUID, tenantId: java.util.UUID) : Int32Envelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo(quoteId = quoteId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Int32Envelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return ApiResponse<Int32Envelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<Int32Envelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesCountGetRequestConfig(quoteId = quoteId, tenantId = tenantId)

        return request<Unit, Int32Envelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesCountGet
     *
     * @param quoteId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesCountGetRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/Count".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return QuoteLineDtoListEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesGet(quoteId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID? = null) : QuoteLineDtoListEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo(quoteId = quoteId, tenantId = tenantId, itemId = itemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteLineDtoListEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return ApiResponse<QuoteLineDtoListEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : ApiResponse<QuoteLineDtoListEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesGetRequestConfig(quoteId = quoteId, tenantId = tenantId, itemId = itemId)

        return request<Unit, QuoteLineDtoListEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesGet
     *
     * @param quoteId 
     * @param tenantId 
     * @param itemId  (optional)
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesGetRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID, itemId: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
                if (itemId != null) {
                    put("itemId", listOf(itemId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param quoteLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesPost(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteLineCreateDto: QuoteLineCreateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo(quoteId = quoteId, tenantId = tenantId, quoteLineCreateDto = quoteLineCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param quoteLineCreateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteLineCreateDto: QuoteLineCreateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesPostRequestConfig(quoteId = quoteId, tenantId = tenantId, quoteLineCreateDto = quoteLineCreateDto)

        return request<QuoteLineCreateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesPost
     *
     * @param quoteId 
     * @param tenantId 
     * @param quoteLineCreateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesPostRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteLineCreateDto: QuoteLineCreateDto?) : RequestConfig<QuoteLineCreateDto> {
        val localVariableBody = quoteLineCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutRequestConfig(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut
     *
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutRequestConfig(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}/Calculate".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())).replace("{"+"quoteLineId"+"}", encodeURIComponent(quoteLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteRequestConfig(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return request<Unit, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete
     *
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteRequestConfig(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())).replace("{"+"quoteLineId"+"}", encodeURIComponent(quoteLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return QuoteLineDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : QuoteLineDtoEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteLineDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return ApiResponse<QuoteLineDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<QuoteLineDtoEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetRequestConfig(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId)

        return request<Unit, QuoteLineDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet
     *
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetRequestConfig(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())).replace("{"+"quoteLineId"+"}", encodeURIComponent(quoteLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @param quoteLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID, quoteLineUpdateDto: QuoteLineUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId, quoteLineUpdateDto = quoteLineUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @param quoteLineUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID, quoteLineUpdateDto: QuoteLineUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutRequestConfig(quoteId = quoteId, quoteLineId = quoteLineId, tenantId = tenantId, quoteLineUpdateDto = quoteLineUpdateDto)

        return request<QuoteLineUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut
     *
     * @param quoteId 
     * @param quoteLineId 
     * @param tenantId 
     * @param quoteLineUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutRequestConfig(quoteId: java.util.UUID, quoteLineId: java.util.UUID, tenantId: java.util.UUID, quoteLineUpdateDto: QuoteLineUpdateDto?) : RequestConfig<QuoteLineUpdateDto> {
        val localVariableBody = quoteLineUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())).replace("{"+"quoteLineId"+"}", encodeURIComponent(quoteLineId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param quoteUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2QuotesServiceQuotesQuoteIdPut(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteUpdateDto: QuoteUpdateDto? = null) : EmptyEnvelope {
        val localVarResponse = apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo(quoteId = quoteId, tenantId = tenantId, quoteUpdateDto = quoteUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EmptyEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @param quoteUpdateDto  (optional)
     * @return ApiResponse<EmptyEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteUpdateDto: QuoteUpdateDto?) : ApiResponse<EmptyEnvelope?> {
        val localVariableConfig = apiV2QuotesServiceQuotesQuoteIdPutRequestConfig(quoteId = quoteId, tenantId = tenantId, quoteUpdateDto = quoteUpdateDto)

        return request<QuoteUpdateDto, EmptyEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2QuotesServiceQuotesQuoteIdPut
     *
     * @param quoteId 
     * @param tenantId 
     * @param quoteUpdateDto  (optional)
     * @return RequestConfig
     */
    fun apiV2QuotesServiceQuotesQuoteIdPutRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID, quoteUpdateDto: QuoteUpdateDto?) : RequestConfig<QuoteUpdateDto> {
        val localVariableBody = quoteUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/QuotesService/Quotes/{quoteId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return QuoteDtoEnvelope
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getQuoteAsync(quoteId: java.util.UUID, tenantId: java.util.UUID) : QuoteDtoEnvelope {
        val localVarResponse = getQuoteAsyncWithHttpInfo(quoteId = quoteId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteDtoEnvelope
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteId 
     * @param tenantId 
     * @return ApiResponse<QuoteDtoEnvelope?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getQuoteAsyncWithHttpInfo(quoteId: java.util.UUID, tenantId: java.util.UUID) : ApiResponse<QuoteDtoEnvelope?> {
        val localVariableConfig = getQuoteAsyncRequestConfig(quoteId = quoteId, tenantId = tenantId)

        return request<Unit, QuoteDtoEnvelope>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getQuoteAsync
     *
     * @param quoteId 
     * @param tenantId 
     * @return RequestConfig
     */
    fun getQuoteAsyncRequestConfig(quoteId: java.util.UUID, tenantId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tenantId", listOf(tenantId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/QuotesService/Quotes/{quoteId}".replace("{"+"quoteId"+"}", encodeURIComponent(quoteId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
