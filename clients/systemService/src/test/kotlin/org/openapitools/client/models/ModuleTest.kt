/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Module
import org.openapitools.client.models.ISwaggerSpec

class ModuleTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Module
        //val modelInstance = Module()

        // to test the property `enable`
        should("test enable") {
            // uncomment below to test the property
            //modelInstance.enable shouldBe ("TODO")
        }

        // to test the property `active`
        should("test active") {
            // uncomment below to test the property
            //modelInstance.active shouldBe ("TODO")
        }

        // to test the property `order`
        should("test order") {
            // uncomment below to test the property
            //modelInstance.order shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `name`
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `fullName`
        should("test fullName") {
            // uncomment below to test the property
            //modelInstance.fullName shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `configuration`
        should("test configuration") {
            // uncomment below to test the property
            //modelInstance.configuration shouldBe ("TODO")
        }

        // to test the property `author`
        should("test author") {
            // uncomment below to test the property
            //modelInstance.author shouldBe ("TODO")
        }

        // to test the property `authorUrl`
        should("test authorUrl") {
            // uncomment below to test the property
            //modelInstance.authorUrl shouldBe ("TODO")
        }

        // to test the property `license`
        should("test license") {
            // uncomment below to test the property
            //modelInstance.license shouldBe ("TODO")
        }

        // to test the property `requireLicenseAcceptance`
        should("test requireLicenseAcceptance") {
            // uncomment below to test the property
            //modelInstance.requireLicenseAcceptance shouldBe ("TODO")
        }

        // to test the property `repository`
        should("test repository") {
            // uncomment below to test the property
            //modelInstance.repository shouldBe ("TODO")
        }

        // to test the property `path`
        should("test path") {
            // uncomment below to test the property
            //modelInstance.path shouldBe ("TODO")
        }

        // to test the property `icon`
        should("test icon") {
            // uncomment below to test the property
            //modelInstance.icon shouldBe ("TODO")
        }

        // to test the property `image`
        should("test image") {
            // uncomment below to test the property
            //modelInstance.image shouldBe ("TODO")
        }

        // to test the property `nuSpecPath`
        should("test nuSpecPath") {
            // uncomment below to test the property
            //modelInstance.nuSpecPath shouldBe ("TODO")
        }

        // to test the property `manifest`
        should("test manifest") {
            // uncomment below to test the property
            //modelInstance.manifest shouldBe ("TODO")
        }

        // to test the property `documentation`
        should("test documentation") {
            // uncomment below to test the property
            //modelInstance.documentation shouldBe ("TODO")
        }

        // to test the property `website`
        should("test website") {
            // uncomment below to test the property
            //modelInstance.website shouldBe ("TODO")
        }

        // to test the property `logo`
        should("test logo") {
            // uncomment below to test the property
            //modelInstance.logo shouldBe ("TODO")
        }

        // to test the property `swaggerSpec`
        should("test swaggerSpec") {
            // uncomment below to test the property
            //modelInstance.swaggerSpec shouldBe ("TODO")
        }

        // to test the property `swaggerSpecs`
        should("test swaggerSpecs") {
            // uncomment below to test the property
            //modelInstance.swaggerSpecs shouldBe ("TODO")
        }

        // to test the property `url`
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `assemblyPaths`
        should("test assemblyPaths") {
            // uncomment below to test the property
            //modelInstance.assemblyPaths shouldBe ("TODO")
        }

        // to test the property `markedForDeletion`
        should("test markedForDeletion") {
            // uncomment below to test the property
            //modelInstance.markedForDeletion shouldBe ("TODO")
        }

        // to test the property `version`
        should("test version") {
            // uncomment below to test the property
            //modelInstance.version shouldBe ("TODO")
        }

    }
}
