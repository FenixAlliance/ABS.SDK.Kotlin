/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.CountriesApi
import org.openapitools.client.models.CityDtoListEnvelope
import org.openapitools.client.models.CountryCallingCodeDtoListEnvelope
import org.openapitools.client.models.CountryDtoEnvelope
import org.openapitools.client.models.CountryDtoListEnvelope
import org.openapitools.client.models.CountryStateDtoEnvelope
import org.openapitools.client.models.CountryStateDtoListEnvelope
import org.openapitools.client.models.CountryTopLevelDomainDtoListEnvelope
import org.openapitools.client.models.CurrencyDtoListEnvelope
import org.openapitools.client.models.ErrorEnvelope
import org.openapitools.client.models.TimezoneDtoListEnvelope

class CountriesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CountriesApi
        //val apiInstance = CountriesApi()

        // to test apiV2GlobeServiceCountriesCountryIdCallingCodesGet
        should("test apiV2GlobeServiceCountriesCountryIdCallingCodesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdCallingCodesGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryCallingCodeDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdCallingCodesGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdCurrenciesGet
        should("test apiV2GlobeServiceCountriesCountryIdCurrenciesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdCurrenciesGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CurrencyDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdCurrenciesGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdGet
        should("test apiV2GlobeServiceCountriesCountryIdGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryDtoEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet
        should("test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet
            //val countryStateId : kotlin.String = countryStateId_example // kotlin.String | 
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CityDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet(countryStateId, countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet
        should("test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet
            //val countryStateId : kotlin.String = countryStateId_example // kotlin.String | 
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryStateDtoEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet(countryStateId, countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdStatesGet
        should("test apiV2GlobeServiceCountriesCountryIdStatesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdStatesGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryStateDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdStatesGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdTimezonesGet
        should("test apiV2GlobeServiceCountriesCountryIdTimezonesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdTimezonesGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : TimezoneDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdTimezonesGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet
        should("test apiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet") {
            // uncomment below to test apiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet
            //val countryId : kotlin.String = countryId_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryTopLevelDomainDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet(countryId, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesGet
        should("test apiV2GlobeServiceCountriesGet") {
            // uncomment below to test apiV2GlobeServiceCountriesGet
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesGet(apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

        // to test apiV2GlobeServiceCountriesSearchGet
        should("test apiV2GlobeServiceCountriesSearchGet") {
            // uncomment below to test apiV2GlobeServiceCountriesSearchGet
            //val countryName : kotlin.String = countryName_example // kotlin.String | 
            //val apiVersion : kotlin.String = apiVersion_example // kotlin.String | 
            //val xApiVersion : kotlin.String = xApiVersion_example // kotlin.String | 
            //val result : CountryDtoListEnvelope = apiInstance.apiV2GlobeServiceCountriesSearchGet(countryName, apiVersion, xApiVersion)
            //result shouldBe ("TODO")
        }

    }
}
